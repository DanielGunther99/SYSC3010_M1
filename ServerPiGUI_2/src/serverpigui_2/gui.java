/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverpigui_2;

import java.sql.*;
import static java.sql.Date.valueOf;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;

/**
 *
 * @author Cameron
 */
public class gui extends javax.swing.JFrame {

    /**
     * Creates new form gui
     */
    public gui() {
        initComponents();
    }

    public void setDbText(String str) {
        dbOut.setText(str);
    }

    public void setConsoleText(String str) {
        consoleOut.setText(str);
    }

    static int id = -1; // Setting to -1 so program knows if it has been updated by the user or not
    static String strTime = "";
    static String strDate = "";
    Refresh r = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dbOut = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        idIn = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        consoleOut = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("EPMD");

        dbOut.setEditable(false);
        dbOut.setColumns(20);
        dbOut.setRows(5);
        jScrollPane1.setViewportView(dbOut);

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Get Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("ID");

        consoleOut.setColumns(20);
        consoleOut.setRows(5);
        consoleOut.setFocusable(false);
        jScrollPane3.setViewportView(consoleOut);

        jLabel3.setText("Time");

        jLabel5.setText("Heart Rate (bpm)");

        jLabel6.setText("Gas (ppm)");

        jLabel7.setText("Longitude");

        jLabel8.setText("Latitude");

        jLabel9.setText("Date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(idIn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jButton2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 281, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(60, 60, 60)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(45, 45, 45)
                .addComponent(jLabel8)
                .addGap(35, 35, 35)
                .addComponent(jLabel7)
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(92, 92, 92)
                                .addComponent(jButton2)
                                .addGap(66, 66, 66)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // stop existing thread
        if (r != null) {
            r.halt();
        }

        //ensure input is correct
        try {
            DateFormat dateFormat = new SimpleDateFormat("hh:mm");
            id = Integer.parseInt(idIn.getText());
            strTime = "";//timeIn.getText().trim();
            strDate = "";//dateIn.getText().trim();
            if (!strTime.equals("")){
                java.sql.Time time = new java.sql.Time(dateFormat.parse(strTime).getTime());
            }
            if (!strDate.equals("")){
            java.sql.Date date = valueOf(strDate);
            }
        } catch (Exception e) {
            consoleOut.setText("Input not recognized");
        }

        // begin new thread with new user input
        // threading must be used because while a program is waiting for a packet, it cannot process new user input or refresh a gui
        // this means that 2 processes are needed: one to recieve packets, one to process new user inputs and refresh the gui
        r = new Refresh(consoleOut, dbOut);
        new Thread(r).start();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea consoleOut;
    private javax.swing.JTextArea dbOut;
    private javax.swing.JTextField idIn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}

class Refresh extends Thread {

    public boolean stopFlag = false;
    private JTextArea consoleOut;
    private JTextArea dbOut;
    ArrayList<Integer> knownIDs = new ArrayList<Integer>();
    DateFormat timeFormat = new SimpleDateFormat("hh:mm:ss");

    public Refresh(JTextArea consoleOut, JTextArea dbOut) {
        this.consoleOut = consoleOut;
        this.dbOut = dbOut;
    }

    public void halt() {
        stopFlag = true;
    }

    @Override
    public void run() {
        try {
            String db = "jdbc:sqlite:C:/sqlite/data";
            int id = gui.id;
            String strTime = gui.strTime;
            String strDate = gui.strDate;
            DateFormat dateFormat = new SimpleDateFormat("hh:mm:ss");


                // Print what the database has on that ID and keep up to date. Also keep checking the knownIDs table for any new ids that have just connected
                while (!stopFlag) {
                    String conout = "Watching ID: " + id + "\nReal time data\nKnown IDs: ";
                    String comm = "SELECT * FROM personnel" + id;
                    System.out.println("2");
                    String dbout = "";

                    try {
                        Connection path = DriverManager.getConnection(db);
                        Statement command = path.createStatement();
                        ResultSet r = null;

                        // This needs to be in a try block in case the ID doesn't exist
                        try {
                            r = command.executeQuery(comm);
                            while (r.next()) {
                                String[] dt = r.getString("datetime").split("_");
                                dbout += (dt[0] + "\t"
                                        + dt[1] + "\t"
                                        + r.getInt("bpm") + "\t"
                                        + r.getInt("ppm") + "\t"
                                        + r.getFloat("latitude") + "\t"
                                        + r.getFloat("longitude") + "\n");
                            }
                        } catch (Exception e) {
                            dbout = "No Data Found";
                        }


                        dbOut.setText(dbout);

                        // Watch for new IDs
                        comm = "SELECT * FROM knownIDs";
                        r = command.executeQuery(comm);
                        while (r.next()) {
                            int a = r.getInt("id");
                            if (!knownIDs.contains(a)) {
                                knownIDs.add(a);
                            }
                        }

                        consoleOut.setText(conout += knownIDs.toString());

                        // Refresh every second
                        Thread.sleep(1000);

                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    } catch (InterruptedException ex) {
                        Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        } catch (Exception e) {
        };
    }
}
